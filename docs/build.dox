/*!

@page build_guide Building applications

@tableofcontents

This is about compiling and linking applications that use GRWL.  For information on
how to write such applications, start with the
[introductory tutorial](@ref quick_guide).  For information on how to compile
the GRWL library itself, see @ref compile_guide.

This is not a tutorial on compilation or linking.  It assumes basic
understanding of how to compile and link a C program as well as how to use the
specific compiler of your chosen development environment.  The compilation
and linking process should be explained in your C programming material and in
the documentation for your development environment.


@section build_include Including the GRWL header file

You should include the GRWL header in the source files where you use OpenGL or
GRWL.

@code
#include <GRWL/grwl.h>
@endcode

This header defines all the constants and declares all the types and function
prototypes of the GRWL API.  By default, it also includes the OpenGL header from
your development environment.  See [option macros](@ref build_macros) below for
how to select OpenGL ES headers and more.

The GRWL header also defines any platform-specific macros needed by your OpenGL
header, so that it can be included without needing any window system headers.

It does this only when needed, so if window system headers are included, the
GRWL header does not try to redefine those symbols.  The reverse is not true,
i.e. `windows.h` cannot cope if any Win32 symbols have already been defined.

In other words:

 - Use the GRWL header to include OpenGL or OpenGL ES headers portably
 - Do not include window system headers unless you will use those APIs directly
 - If you do need such headers, include them before the GRWL header

If you are using an OpenGL extension loading library such as
[glad](https://github.com/Dav1dde/glad), the extension loader header should
be included before the GRWL one.  GRWL attempts to detect any OpenGL or OpenGL
ES header or extension loader header included before it and will then disable
the inclusion of the default OpenGL header.  Most extension loaders also define
macros that disable similar headers below it.

@code
#include <glad/gl.h>
#include <GRWL/grwl.h>
@endcode

Both of these mechanisms depend on the extension loader header defining a known
macro.  If yours doesn't or you don't know which one your users will pick, the
@ref GRWL_INCLUDE_NONE macro will explicitly prevent the GRWL header from
including the OpenGL header.  This will also allow you to include the two
headers in any order.

@code
#define GRWL_INCLUDE_NONE
#include <GRWL/grwl.h>
#include <glad/gl.h>
@endcode


@subsection build_macros GRWL header option macros

These macros may be defined before the inclusion of the GRWL header and affect
its behavior.

@anchor GRWL_DLL
__GRWL_DLL__ is required on Windows when using the GRWL DLL, to tell the
compiler that the GRWL functions are defined in a DLL.

The following macros control which OpenGL or OpenGL ES API header is included.
Only one of these may be defined at a time.

@note GRWL does not provide any of the API headers mentioned below.  They are
provided by your development environment or your OpenGL, OpenGL ES or Vulkan
SDK, and most of them can be downloaded from the
[Khronos Registry](https://www.khronos.org/registry/).

@anchor GRWL_INCLUDE_GLCOREARB
__GRWL_INCLUDE_GLCOREARB__ makes the GRWL header include the modern
`GL/glcorearb.h` header (`OpenGL/gl3.h` on macOS) instead of the regular OpenGL
header.

@anchor GRWL_INCLUDE_ES1
__GRWL_INCLUDE_ES1__ makes the GRWL header include the OpenGL ES 1.x `GLES/gl.h`
header instead of the regular OpenGL header.

@anchor GRWL_INCLUDE_ES2
__GRWL_INCLUDE_ES2__ makes the GRWL header include the OpenGL ES 2.0
`GLES2/gl2.h` header instead of the regular OpenGL header.

@anchor GRWL_INCLUDE_ES3
__GRWL_INCLUDE_ES3__ makes the GRWL header include the OpenGL ES 3.0
`GLES3/gl3.h` header instead of the regular OpenGL header.

@anchor GRWL_INCLUDE_ES31
__GRWL_INCLUDE_ES31__ makes the GRWL header include the OpenGL ES 3.1
`GLES3/gl31.h` header instead of the regular OpenGL header.

@anchor GRWL_INCLUDE_ES32
__GRWL_INCLUDE_ES32__ makes the GRWL header include the OpenGL ES 3.2
`GLES3/gl32.h` header instead of the regular OpenGL header.

@anchor GRWL_INCLUDE_NONE
__GRWL_INCLUDE_NONE__ makes the GRWL header not include any OpenGL or OpenGL ES
API header.  This is useful in combination with an extension loading library.

If none of the above inclusion macros are defined, the standard OpenGL `GL/gl.h`
header (`OpenGL/gl.h` on macOS) is included, unless GRWL detects the inclusion
guards of any OpenGL, OpenGL ES or extension loader header it knows about.

The following macros control the inclusion of additional API headers.  Any
number of these may be defined simultaneously, and/or together with one of the
above macros.

@anchor GRWL_INCLUDE_VULKAN
__GRWL_INCLUDE_VULKAN__ makes the GRWL header include the Vulkan
`vulkan/vulkan.h` header in addition to any selected OpenGL or OpenGL ES header.

@anchor GRWL_INCLUDE_GLEXT
__GRWL_INCLUDE_GLEXT__ makes the GRWL header include the appropriate extension
header for the OpenGL or OpenGL ES header selected above after and in addition
to that header.

@anchor GRWL_INCLUDE_GLU
__GRWL_INCLUDE_GLU__ makes the header include the GLU header in addition to the
header selected above.  This should only be used with the standard OpenGL header
and only for compatibility with legacy code.  GLU has been deprecated and should
not be used in new code.

@note None of these macros may be defined during the compilation of GRWL itself.
If your build includes GRWL and you define any these in your build files, make
sure they are not applied to the GRWL sources.


@section build_link Link with the right libraries

GRWL is essentially a wrapper of various platform-specific APIs and therefore
needs to link against many different system libraries.  If you are using GRWL as
a shared library / dynamic library / DLL then it takes care of these links.
However, if you are using GRWL as a static library then your executable will
need to link against these libraries.

On Windows and macOS, the list of system libraries is static and can be
hard-coded into your build environment.  See the section for your development
environment below.  On Linux and other Unix-like operating systems, the list
varies but can be retrieved in various ways as described below.

A good general introduction to linking is
[Beginner's Guide to Linkers](https://www.lurklurk.org/linkers/linkers.html) by
David Drysdale.


@subsection build_link_win32 With MinGW or Visual C++ on Windows

The static version of the GRWL library is named `grwl`.  When using this
version, it is also necessary to link with some libraries that GRWL uses.

When using MinGW to link an application with the static version of GRWL, you
must also explicitly link with `gdi32`. Other toolchains including MinGW-w64
include it in the set of default libraries along with other dependencies like
`user32` and `kernel32`.

The link library for the GRWL DLL is named `grwldll`.  When compiling an
application that uses the DLL version of GRWL, you need to define the @ref
GRWL_DLL macro _before_ any inclusion of the GRWL header.  This can be done
either with a compiler switch or by defining it in your source code.


@subsection build_link_cmake_source With CMake and GRWL source

This section is about using CMake to compile and link GRWL along with your
application.  If you want to use an installed binary instead, see @ref
build_link_cmake_package.

With a few changes to your `CMakeLists.txt` you can have the GRWL source tree
built along with your application.

Add the root directory of the GRWL source tree to your project.  This will add
the `grwl` target to your project.

@code{.cmake}
add_subdirectory(path/to/grwl)
@endcode

Once GRWL has been added, link your application against the `grwl` target.
This adds the GRWL library and its link-time dependencies as it is currently
configured, the include directory for the GRWL header and, when applicable, the
@ref GRWL_DLL macro.

@code{.cmake}
target_link_libraries(myapp grwl)
@endcode

Note that the `grwl` target does not depend on OpenGL, as GRWL loads any OpenGL,
OpenGL ES or Vulkan libraries it needs at runtime.  If your application calls
OpenGL directly, instead of using a modern
[extension loader library](@ref context_glext_auto), use the OpenGL CMake
package.

@code{.cmake}
find_package(OpenGL REQUIRED)
@endcode

If OpenGL is found, the `OpenGL::GL` target is added to your project, containing
library and include directory paths.  Link against this like any other library.

@code{.cmake}
target_link_libraries(myapp OpenGL::GL)
@endcode

For a minimal example of a program and GRWL sources built with CMake, see the
[GRWL CMake Starter](https://github.com/juliettef/GRWL-CMake-starter) on GitHub.


@subsection build_link_cmake_package With CMake and installed GRWL binaries

This section is about using CMake to link GRWL after it has been built and
installed.  If you want to build it along with your application instead, see
@ref build_link_cmake_source.

With a few changes to your `CMakeLists.txt` you can locate the package and
target files generated when GRWL is installed.

@code{.cmake}
find_package(grwl 3.4 REQUIRED)
@endcode

Once GRWL has been added to the project, link against it with the `grwl` target.
This adds the GRWL library and its link-time dependencies, the include directory
for the GRWL header and, when applicable, the @ref GRWL_DLL macro.

@code{.cmake}
target_link_libraries(myapp grwl)
@endcode

Note that the `grwl` target does not depend on OpenGL, as GRWL loads any OpenGL,
OpenGL ES or Vulkan libraries it needs at runtime.  If your application calls
OpenGL directly, instead of using a modern
[extension loader library](@ref context_glext_auto), use the OpenGL CMake
package.

@code{.cmake}
find_package(OpenGL REQUIRED)
@endcode

If OpenGL is found, the `OpenGL::GL` target is added to your project, containing
library and include directory paths.  Link against this like any other library.

@code{.cmake}
target_link_libraries(myapp OpenGL::GL)
@endcode


@subsection build_link_pkgconfig With makefiles and pkg-config on Unix

GRWL supports [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/),
and the `grwl.pc` pkg-config file is generated when the GRWL library is built
and is installed along with it.  A pkg-config file describes all necessary
compile-time and link-time flags and dependencies needed to use a library.  When
they are updated or if they differ between systems, you will get the correct
ones automatically.

A typical compile and link command-line when using the static version of the
GRWL library may look like this:

@code{.sh}
cc $(pkg-config --cflags grwl) -o myprog myprog.c $(pkg-config --static --libs grwl)
@endcode

If you are using the shared version of the GRWL library, omit the `--static`
flag.

@code{.sh}
cc $(pkg-config --cflags grwl) -o myprog myprog.c $(pkg-config --libs grwl)
@endcode

You can also use the `grwl.pc` file without installing it first, by using the
`PKG_CONFIG_PATH` environment variable.

@code{.sh}
env PKG_CONFIG_PATH=path/to/grwl/src cc $(pkg-config --cflags grwl) -o myprog myprog.c $(pkg-config --libs grwl)
@endcode

The dependencies do not include OpenGL, as GRWL loads any OpenGL, OpenGL ES or
Vulkan libraries it needs at runtime.  If your application calls OpenGL
directly, instead of using a modern
[extension loader library](@ref context_glext_auto), you should add the `gl`
pkg-config package.

@code{.sh}
cc $(pkg-config --cflags grwl gl) -o myprog myprog.c $(pkg-config --libs grwl gl)
@endcode


@subsection build_link_xcode With Xcode on macOS

If you are using the dynamic library version of GRWL, add it to the project
dependencies.

If you are using the static library version of GRWL, add it and the Cocoa,
OpenGL and IOKit frameworks to the project as dependencies.  They can all be
found in `/System/Library/Frameworks`.


@subsection build_link_osx With command-line on macOS

It is recommended that you use [pkg-config](@ref build_link_pkgconfig) when
building from the command line on macOS.  That way you will get any new
dependencies added automatically.  If you still wish to build manually, you need
to add the required frameworks and libraries to your command-line yourself using
the `-l` and `-framework` switches.

If you are using the dynamic GRWL library, which is named `libgrwl.3.dylib`, do:

@code{.sh}
cc -o myprog myprog.c -lgrwl -framework Cocoa -framework OpenGL -framework IOKit
@endcode

If you are using the static library, named `libgrwl.a`, substitute `-lgrwl`
for `-lgrwl`.

Note that you do not add the `.framework` extension to a framework when linking
against it from the command-line.

@note Your machine may have `libGL.*.dylib` style OpenGL library, but that is
for the X Window System and will not work with the macOS native version of GRWL.

*/
