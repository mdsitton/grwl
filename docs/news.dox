/*!

@page news Release notes

@tableofcontents


@section news_34 Release notes for version 3.4

@subsection features_34 New features in version 3.4


@subsubsection context_user_34 Multiple window contexts

GRWL now provides the ability to create multiple OpenGL and OpenGL ES
contexts for a given window. Called user contexts, a [GRWLusercontext](@ref context_user)
can be created using @ref glfwCreateUserContext,
destroyed using @ref glfwDestroyUserContext, and managed with
@ref glfwMakeUserContextCurrent and @ref glfwGetCurrentUserContext.
For more information see the [user context](@ref context_user) documentation.


@subsubsection runtime_platform_34 Runtime platform selection

GRWL now supports being compiled for multiple backends and selecting between
them at runtime with the @ref GRWL_PLATFORM init hint.  After initialization the
selected platform can be queried with @ref glfwGetPlatform.  You can check if
support for a given platform is compiled in with @ref glfwPlatformSupported.

@subsubsection keyboard_layout_34 Keyboard layouts

GRWL can now notify when the keyboard layout has changed with @ref
glfwSetKeyboardLayoutCallback and provides the human-readable name of the
current layout with @ref glfwGetKeyboardLayoutName.

For more information, see @ref keyboard_layout.


@subsubsection standard_cursors_34 More standard cursors

GRWL now provides the standard cursor shapes @ref GRWL_RESIZE_NWSE_CURSOR and
@ref GRWL_RESIZE_NESW_CURSOR for diagonal resizing, @ref GRWL_RESIZE_ALL_CURSOR
for omnidirectional resizing and @ref GRWL_NOT_ALLOWED_CURSOR for showing an
action is not allowed.

Unlike the original set, these shapes may not be available everywhere and
creation will then fail with the new @ref GRWL_CURSOR_UNAVAILABLE error.

The cursors for horizontal and vertical resizing are now referred to as @ref
GRWL_RESIZE_EW_CURSOR and @ref GRWL_RESIZE_NS_CURSOR, and the pointing hand
cursor is now referred to as @ref GRWL_POINTING_HAND_CURSOR.  The older names
are still available.

For more information see @ref cursor_standard.


@subsubsection mouse_passthrough_34 Mouse event passthrough

GRWL now provides the [GRWL_MOUSE_PASSTHROUGH](@ref GRWL_MOUSE_PASSTHROUGH_hint)
window hint for making a window transparent to mouse input, lettings events pass
to whatever window is behind it.  This can also be changed after window
creation with the matching [window attribute](@ref GRWL_MOUSE_PASSTHROUGH_attrib).


@subsubsection wayland_libdecor_34 Wayland libdecor decorations

GRWL now supports improved fallback window decorations via
[libdecor](https://gitlab.freedesktop.org/libdecor/libdecor).

Support for libdecor can be toggled before GRWL is initialized with the
[GRWL_WAYLAND_LIBDECOR](@ref GRWL_WAYLAND_LIBDECOR_hint) init hint.  It is
enabled by default.


@subsubsection wayland_app_id_34 Wayland app_id specification

GRWL now supports specifying the app_id for a Wayland window using the
[GRWL_WAYLAND_APP_ID](@ref GRWL_WAYLAND_APP_ID_hint) window hint string.


@subsubsection features_34_angle_backend Support for ANGLE rendering backend selection

GRWL now provides the
[GRWL_ANGLE_PLATFORM_TYPE](@ref GRWL_ANGLE_PLATFORM_TYPE_hint) init hint for
requesting a specific rendering backend when using
[ANGLE](https://chromium.googlesource.com/angle/angle/) to create OpenGL ES
contexts.


@subsubsection captured_cursor_34 Captured cursor mode

GRWL now supports confining the cursor to the window content area with the @ref
GRWL_CURSOR_CAPTURED cursor mode.

For more information see @ref cursor_mode.


@subsubsection features_34_init_allocator Support for custom memory allocator

GRWL now supports plugging a custom memory allocator at initialization with @ref
glfwInitAllocator.  The allocator is a struct of type @ref GRWLallocator with
function pointers corresponding to the standard library functions `malloc`,
`realloc` and `free`.

For more information see @ref init_allocator.


@subsubsection features_34_position_hint Window hints for initial position

GRWL now provides the @ref GRWL_POSITION_X and @ref GRWL_POSITION_Y window hints for
specifying the initial position of the window.  This removes the need to create a hidden
window, move it and then show it.  The default value of these hints is
`GRWL_ANY_POSITION`, which selects the previous behavior.


@subsubsection features_34_win32_keymenu Support for keyboard access to Windows window menu

GRWL now provides the
[GRWL_WIN32_KEYBOARD_MENU](@ref GRWL_WIN32_KEYBOARD_MENU_hint) window hint for
enabling keyboard access to the window menu via the Alt+Space and
Alt-and-then-Space shortcuts.  This may be useful for more GUI-oriented
applications.

@subsubsection features_34_egl_getconfig Query EGLConfig

GRWL now provides the [glfwGetEGLConfig](@ref glfwGetEGLConfig)
function that returns the EGLConfig that was chosen to create the
given window handle.


@subsection caveats Caveats for version 3.4

@subsubsection native_34 Multiple sets of native access functions

Because GRWL now supports runtime selection of platform (window system), a library binary
may export native access functions for multiple platforms.  Starting with version 3.4 you
must not assume that GRWL is running on a platform just because it exports native access
functions for it.  After initialization, you can query the selected platform with @ref
glfwGetPlatform.


@subsubsection version_string_34 Version string format has been changed

Because GRWL now supports runtime selection of platform (window system), the version
string returned by @ref glfwGetVersionString has been expanded.  It now contains the names
of all APIs for all the platforms that the library binary supports.


@subsubsection joysticks_34 Joystick support is initialized on demand

The joystick part of GRWL is now initialized when first used, primarily to work
around faulty Windows drivers that cause DirectInput to take up to several
seconds to enumerate devices.

This change will usually not be observable.  However, if your application waits
for events without having first called any joystick function or created any
visible windows, the wait may never unblock as GRWL may not yet have subscribed
to joystick related OS events.

To work around this, call any joystick function before waiting for events, for
example by setting a [joystick callback](@ref joystick_event).


@subsubsection wayland_alpha_34 Frambuffer may lack alpha channel on older Wayland systems

On Wayland, when creating an EGL context on a machine lacking the new
`EGL_EXT_present_opaque` extension, the @ref GRWL_ALPHA_BITS window hint will be
ignored and the framebuffer will have no alpha channel.  This is because some
Wayland compositors treat any buffer with an alpha channel as per-pixel
transparent.

If you want a per-pixel transparent window, see the
[GRWL_TRANSPARENT_FRAMEBUFFER](@ref GRWL_TRANSPARENT_FRAMEBUFFER_hint) window
hint.


@subsubsection standalone_34 Tests and examples are disabled when built as a subproject

GRWL now does not build the tests and examples when it is added as
a subdirectory of another CMake project.  To enable these, set the @ref
GRWL_BUILD_TESTS and @ref GRWL_BUILD_EXAMPLES cache variables before adding the
GRWL subdirectory.

@code{.cmake}
set(GRWL_BUILD_EXAMPLES ON CACHE BOOL "" FORCE)
set(GRWL_BUILD_TESTS ON CACHE BOOL "" FORCE)
add_subdirectory(path/to/glfw)
@endcode


@subsubsection initmenu_34 macOS main menu now created at initialization

GRWL now creates the main menu and completes the initialization of NSApplication
during initialization.  Programs that do not want a main menu can disable it
with the [GRWL_COCOA_MENUBAR](@ref GRWL_COCOA_MENUBAR_hint) init hint.


@subsubsection corevideo_34 CoreVideo dependency has been removed

GRWL no longer depends on the CoreVideo framework on macOS and it no longer
needs to be specified during compilation or linking.


@subsubsection caveat_fbtransparency_34 Framebuffer transparency requires DWM transparency

GRWL no longer supports framebuffer transparency enabled via @ref
GRWL_TRANSPARENT_FRAMEBUFFER on Windows 7 if DWM transparency is off
(the Transparency setting under Personalization > Window Color).


@subsubsection emptyevents_34 Empty events on X11 no longer round-trip to server

Events posted with @ref glfwPostEmptyEvent now use a separate unnamed pipe
instead of sending an X11 client event to the helper window.


@subsection deprecations_34 Deprecations in version 3.4

@subsection removals_34 Removals in 3.4

@subsubsection vulkan_static_34 GRWL_VULKAN_STATIC CMake option has been removed

This option was used to compile GRWL directly linked with the Vulkan loader, instead of
using dynamic loading to get hold of `vkGetInstanceProcAddr` at initialization.  This is
now done by calling the @ref glfwInitVulkanLoader function before initialization.

If you need backward compatibility, this macro can still be defined for GRWL 3.4 and will
have no effect.  The call to @ref glfwInitVulkanLoader can be conditionally enabled in
your code by checking the @ref GRWL_VERSION_MAJOR and @ref GRWL_VERSION_MINOR macros.


@subsubsection osmesa_option_34 GRWL_USE_OSMESA CMake option has been removed

This option was used to compile GRWL for the Null platform.  The Null platform is now
always supported.  To produce a library binary that only supports this platform, the way
this CMake option used to do, you will instead need to disable the default platform for
the target OS.  This means setting the @ref GRWL_BUILD_WIN32, @ref GRWL_BUILD_COCOA or
@ref GRWL_BUILD_X11 CMake option to false.

You can set all of them to false and the ones that don't apply for the target OS will be
ignored.


@subsubsection wl_shell_34 Support for the wl_shell protocol has been removed

Support for the wl_shell protocol has been removed and GRWL now only supports
the XDG-Shell protocol.  If your Wayland compositor does not support XDG-Shell
then GRWL will fail to initialize.


@subsection symbols_34 New symbols in version 3.4

@subsubsection functions_34 New functions in version 3.4

 - @ref glfwInitAllocator
 - @ref glfwGetPlatform
 - @ref glfwPlatformSupported
 - @ref glfwInitVulkanLoader
 - @ref glfwGetEGLConfig


@subsubsection types_34 New types in version 3.4

 - @ref GRWLallocator
 - @ref GRWLallocatefun
 - @ref GRWLreallocatefun
 - @ref GRWLdeallocatefun


@subsubsection constants_34 New constants in version 3.4

 - @ref GRWL_PLATFORM
 - @ref GRWL_ANY_PLATFORM
 - @ref GRWL_PLATFORM_WIN32
 - @ref GRWL_PLATFORM_COCOA
 - @ref GRWL_PLATFORM_WAYLAND
 - @ref GRWL_PLATFORM_X11
 - @ref GRWL_PLATFORM_NULL
 - @ref GRWL_PLATFORM_UNAVAILABLE
 - @ref GRWL_POINTING_HAND_CURSOR
 - @ref GRWL_RESIZE_EW_CURSOR
 - @ref GRWL_RESIZE_NS_CURSOR
 - @ref GRWL_RESIZE_NWSE_CURSOR
 - @ref GRWL_RESIZE_NESW_CURSOR
 - @ref GRWL_RESIZE_ALL_CURSOR
 - @ref GRWL_MOUSE_PASSTHROUGH
 - @ref GRWL_NOT_ALLOWED_CURSOR
 - @ref GRWL_CURSOR_UNAVAILABLE
 - @ref GRWL_WIN32_KEYBOARD_MENU
 - @ref GRWL_CONTEXT_DEBUG
 - @ref GRWL_FEATURE_UNAVAILABLE
 - @ref GRWL_FEATURE_UNIMPLEMENTED
 - @ref GRWL_ANGLE_PLATFORM_TYPE
 - @ref GRWL_ANGLE_PLATFORM_TYPE_NONE
 - @ref GRWL_ANGLE_PLATFORM_TYPE_OPENGL
 - @ref GRWL_ANGLE_PLATFORM_TYPE_OPENGLES
 - @ref GRWL_ANGLE_PLATFORM_TYPE_D3D9
 - @ref GRWL_ANGLE_PLATFORM_TYPE_D3D11
 - @ref GRWL_ANGLE_PLATFORM_TYPE_VULKAN
 - @ref GRWL_ANGLE_PLATFORM_TYPE_METAL
 - @ref GRWL_X11_XCB_VULKAN_SURFACE
 - @ref GRWL_CURSOR_CAPTURED
 - @ref GRWL_POSITION_X
 - @ref GRWL_POSITION_Y
 - @ref GRWL_ANY_POSITION
 - @ref GRWL_WAYLAND_LIBDECOR
 - @ref GRWL_WAYLAND_PREFER_LIBDECOR
 - @ref GRWL_WAYLAND_DISABLE_LIBDECOR

*/
